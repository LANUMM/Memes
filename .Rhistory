0,0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,
0,0,0,0,0,0,0,0,0,0,0,0.5,0.5,
0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,1), nrow = 13, byrow = T)
View(salt_matrix)
salt_matrix <- matrix(c(0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,0,
0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,
0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,
0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,
0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,
0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,
0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,
0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,
0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,
0,0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,
0,0,0,0,0,0,0,0,0,0,0,0.5,0.5,
0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,1), nrow = 13, byrow = T)
View(salt_matrix)
library(matlib)
diag(3)
id <- diag(12)
Q <- salt_matrix[1:12,1:12]
R <- salt_matrix[1:12,13]
Zero <- salt_matrix[13,1:12]
I <- salt_matrix[13,13]
invert <- inv(id-Q)
View(invert)
sum(invert[1])
sum(invert[1,])
library(matlib)
salt_matrix <- matrix(c(0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,0,
0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,
0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,
0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,
0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,
0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,
0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,
0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,
0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,
0,0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,
0,0,0,0,0,0,0,0,0,0,0,0.5,0.5,
0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,1), nrow = 13, byrow = T)
id <- diag(12)
Q <- salt_matrix[1:12,1:12]
R <- salt_matrix[1:12,13]
Zero <- salt_matrix[13,1:12]
I <- salt_matrix[13,13]
invert <- inv(id-Q)
sum(invert[1,])
ones_matrix <- matrix(1, 13, 13)
View(ones_matrix)
?replace
rep(0,13)
id2 <- diag(13)
Pj_star <- replace(salt_matrix[,1], values = rep(0,13))
Pj_star <- replace(salt_matrix, salt_matrix[,1], rep(0,13))
View(Pj_star)
meanFPT <- ones_matrix * inv(id2-Pj_star)
meanFPT <- inv(id2-Pj_star) * ones_matrix
meanFPT <- inv((id2-Pj_star)) * ones_matrix
Pj_star <- replace(salt_matrix, salt_matrix[,13], rep(0,13))
View(salt_matrix)
View(Pj_star)
ls()
rm(list = ls())
salt_matrix <- matrix(c(0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,0,
0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,
0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,
0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,
0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,
0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,
0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,
0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,
0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,
0,0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,
0,0,0,0,0,0,0,0,0,0,0,0.5,0.5,
0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,1), nrow = 13, byrow = T)
#To solve using duration
id <- diag(12)
Q <- salt_matrix[1:12,1:12]
R <- salt_matrix[1:12,13]
Zero <- salt_matrix[13,1:12]
I <- salt_matrix[13,13]
invert <- inv(id-Q)
#Solved using duration
sum(invert[1,])
ones_matrix <- matrix(1, 13, 13)
id2 <- diag(13)
Pj_star <- replace(salt_matrix, salt_matrix[,13], rep(0,13))
View(Pj_star)
length(salt_matrix[,13])
length(rep(0,13))
Pj_star <- replace(salt_matrix, salt_matrix[,1], rep(0,13))
Pj_star <- replace(salt_matrix, salt_matrix[,12], rep(0,13))
View(salt_matrix)
View(Pj_star)
Pj_star <- replace(salt_matrix, salt_matrix[,13], matrix(0,13,1))
salt_matrix[,13] <- matrix(0,13,1)
View(salt_matrix)
meanFPT <- inv(id2-salt_matrix) * ones_matrix
View(meanFPT)
meanFPT <- ones_matrix * inv(id2-salt_matrix)
View(meanFPT)
sum(meanFPT[,1])
sum(meanFPT[1,])
#To solve using mean first passage time
ones_matrix <- matrix(1, 1, 13)
meanFPT <- ones_matrix * inv(id2-salt_matrix)
#To solve using mean first passage time
ones_matrix <- matrix(1, 13, 1)
meanFPT <- ones_matrix * inv(id2-salt_matrix)
View(ones_matrix)
#To solve using mean first passage time
ones_matrix <- matrix(1, 1, 13)
dim(inv(id2-salt_matrix))
dim(ones_matrix)
#To solve using mean first passage time
ones_matrix <- matrix(1, 13, 1)
meanFPT <- inv(id2-salt_matrix) * ones_matrix
View(ones_matrix)
View(salt_matrix)
matrix(1,13,13) * matrix(1,13,1)
matrix(1,13,13) * matrix(1,13,13)
meanFPT <- salt_matrix %*% ones_matrix
View(meanFPT)
sum(meanFPT)
meanFPT <- ones_matrix %*% salt_matrix
salt_matrix <- matrix(c(0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,0,
0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,
0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,
0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,
0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,
0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,
0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,
0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,
0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,
0,0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,
0,0,0,0,0,0,0,0,0,0,0,0.5,0.5,
0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,1), nrow = 13, byrow = T)
salt_matrix[,1] <- matrix(0,13,1)
meanFPT <- salt_matrix %*% ones_matrix
View(meanFPT)
View(salt_matrix)
salt_matrix[,13] <- matrix(0,13,1)
View(salt_matrix)
meanFPT <- inv(id2-salt_matrix) %*% ones_matrix
View(meanFPT)
#Solved using mean first passage time
meanFPT[1]
salt_matrix <- matrix(c(0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,0,
0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,0,
0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,0,
0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,0,
0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,0,
0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,0,
0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,0,
0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,0,
0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,0,
0,0,0,0,0,0,0,0,0,0,0.5,0.4,0.1,
0,0,0,0,0,0,0,0,0,0,0,0.5,0.5,
0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,1), nrow = 13, byrow = T)
#Part b
salt_matrix5 <- salt_matrix^5
View(salt_matrix5)
salt_matrix5[1,13]
#Part b
salt_matrix5 <- salt_matrix %^% 5
#Part b
salt_matrix5 <- salt_matrix %*% salt_matrix %*% salt_matrix %*% salt_matrix %*% salt_matrix
View(salt_matrix5)
View(meanFPT)
#Solved using mean first passage time
meanFPT[1,1]
#######################################################################################
# Function to scrape season skater statistics from Hockey-reference.com
#######################################################################################
scrapeSkaters <- function(S) {
# The function takes parameter S which is a string and represents the season (YYYY)
# Returns: data frame
require(XML)
require(httr)
# Define certicificate file, needed since website is HTTPS
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
cafile <- "/etc/ssl/certs/ca-certificates.crt"
# Read secure page
## create the URL to scrape data from
URL <- paste("https://www.hockey-reference.com/leagues/NHL_",S, "_skaters.html", sep="")
page <- GET(URL,config(cainfo=cafile))
# Use regex to extract the desired table from the page
x <- text_content(page) #will give a deprecation warning, but that is OK
tab <- sub('.*(<table class="sortable stats_table".*?>.*</table>).*', '\\1', x)
## grab the data from the page
tables <- readHTMLTable(tab)
ds.skaters <- tables$stats
ds.skaters <- ds.skaters[which(ds.skaters$Rk!="Rk"),]
## Convert to lower case character data (otherwise will be treated as factors)
for(i in 1:ncol(ds.skaters)) {
ds.skaters[,i] <- as.character(ds.skaters[,i])
names(ds.skaters) <- tolower(colnames(ds.skaters))
}
## finally fix the columns - NAs forced by coercion warnings
for(i in c(1, 3, 6:19)) {
ds.skaters[,i] <- as.numeric(ds.skaters[, i])
}
cn <- colnames(ds.skaters)
ds.skaters <- cbind(ds.skaters,ppp=rowSums(ds.skaters[,which(cn=="pp")]))
cn <- colnames(ds.skaters)
## fix a couple of the column names
#colnames(ds.skaters)
names(ds.skaters)[11] <- "pim"
names(ds.skaters)[18] <- "spct"
## remove the header and totals row
ds.skaters <- ds.skaters[!is.na(ds.skaters$rk), ]
## add the year too
ds.skaters$season <- S
## remove any ' from players names (will case parsing issues later otherwise)
ds.skaters$player <- gsub("'","",ds.skaters[,"player"])
## return the dataframe of subset of all categories
return(ds.skaters[,c(2:11,29,15:16,20,24)])
#ds.skaters
}
P <- scrapeSkaters(2018)
View(P)
#######################################################################################
# Function to scrape season skater statistics from Hockey-reference.com
#######################################################################################
scrapeSkaters <- function(S) {
# The function takes parameter S which is a string and represents the season (YYYY)
# Returns: data frame
require(XML)
require(httr)
# Define certicificate file, needed since website is HTTPS
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
cafile <- "/etc/ssl/certs/ca-certificates.crt"
# Read secure page
## create the URL to scrape data from
URL <- paste("https://www.hockey-reference.com/leagues/NHL_",S, "_skaters.html", sep="")
page <- GET(URL,config(cainfo=cafile))
# Use regex to extract the desired table from the page
x <- text_content(page) #will give a deprecation warning, but that is OK
tab <- sub('.*(<table class="sortable stats_table".*?>.*</table>).*', '\\1', x)
## grab the data from the page
tables <- readHTMLTable(tab)
ds.skaters <- tables$stats
ds.skaters <- ds.skaters[which(ds.skaters$Rk!="Rk"),]
## Convert to lower case character data (otherwise will be treated as factors)
for(i in 1:ncol(ds.skaters)) {
ds.skaters[,i] <- as.character(ds.skaters[,i])
names(ds.skaters) <- tolower(colnames(ds.skaters))
}
## finally fix the columns - NAs forced by coercion warnings
for(i in c(1, 3, 6:19)) {
ds.skaters[,i] <- as.numeric(ds.skaters[, i])
}
cn <- colnames(ds.skaters)
ds.skaters <- cbind(ds.skaters,ppp=rowSums(ds.skaters[,which(cn=="pp")]))
cn <- colnames(ds.skaters)
## fix a couple of the column names
#colnames(ds.skaters)
names(ds.skaters)[11] <- "pim"
names(ds.skaters)[18] <- "spct"
## remove the header and totals row
ds.skaters <- ds.skaters[!is.na(ds.skaters$rk), ]
## add the year too
ds.skaters$season <- S
## remove any ' from players names (will case parsing issues later otherwise)
ds.skaters$player <- gsub("'","",ds.skaters[,"player"])
## return the dataframe of subset of all categories
return(ds.skaters[,c(2:11,29,15:16,20,24)])
#ds.skaters
}
P <- scrapeSkaters(2018)
View(P)
library(RMySQL)
#######################################################################################
# Function to scrape season skater statistics from Hockey-reference.com
#######################################################################################
scrapeSkaters <- function(S) {
# The function takes parameter S which is a string and represents the season (YYYY)
# Returns: data frame
require(XML)
require(httr)
# Define certicificate file, needed since website is HTTPS
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
cafile <- "/etc/ssl/certs/ca-certificates.crt"
# Read secure page
## create the URL to scrape data from
URL <- paste("https://www.hockey-reference.com/leagues/NHL_",S, "_skaters.html", sep="")
page <- GET(URL,config(cainfo=cafile))
# Use regex to extract the desired table from the page
x <- text_content(page) #will give a deprecation warning, but that is OK
tab <- sub('.*(<table class="sortable stats_table".*?>.*</table>).*', '\\1', x)
## grab the data from the page
tables <- readHTMLTable(tab)
ds.skaters <- tables$stats
ds.skaters <- ds.skaters[which(ds.skaters$Rk!="Rk"),]
## Convert to lower case character data (otherwise will be treated as factors)
for(i in 1:ncol(ds.skaters)) {
ds.skaters[,i] <- as.character(ds.skaters[,i])
names(ds.skaters) <- tolower(colnames(ds.skaters))
}
## finally fix the columns - NAs forced by coercion warnings
for(i in c(1, 3, 6:19)) {
ds.skaters[,i] <- as.numeric(ds.skaters[, i])
}
cn <- colnames(ds.skaters)
ds.skaters <- cbind(ds.skaters,ppp=rowSums(ds.skaters[,which(cn=="pp")]))
cn <- colnames(ds.skaters)
## fix a couple of the column names
#colnames(ds.skaters)
names(ds.skaters)[11] <- "pim"
names(ds.skaters)[18] <- "spct"
## remove the header and totals row
ds.skaters <- ds.skaters[!is.na(ds.skaters$rk), ]
## add the year too
ds.skaters$season <- S
## remove any ' from players names (will case parsing issues later otherwise)
ds.skaters$player <- gsub("'","",ds.skaters[,"player"])
## return the dataframe of subset of all categories
return(ds.skaters[,c(2:11,29,15:16,20,24)])
#ds.skaters
}
P <- scrapeSkaters(2018)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
dbWriteTable(mydb, "Players", P, overwrite = TRUE)
dbDisconnect(mydb)
#######################################################################################
# Function to scrape season skater statistics from Hockey-reference.com
#######################################################################################
scrapeSkaters <- function(S) {
# The function takes parameter S which is a string and represents the season (YYYY)
# Returns: data frame
require(XML)
require(httr)
# Define certicificate file, needed since website is HTTPS
cafile <- system.file("CurlSSL", "cacert.pem", package = "RCurl")
cafile <- "/etc/ssl/certs/ca-certificates.crt"
# Read secure page
## create the URL to scrape data from
URL <- paste("https://www.hockey-reference.com/leagues/NHL_",S, "_skaters.html", sep="")
page <- GET(URL,config(cainfo=cafile))
# Use regex to extract the desired table from the page
x <- text_content(page) #will give a deprecation warning, but that is OK
tab <- sub('.*(<table class="sortable stats_table".*?>.*</table>).*', '\\1', x)
## grab the data from the page
tables <- readHTMLTable(tab)
ds.skaters <- tables$stats
ds.skaters <- ds.skaters[which(ds.skaters$Rk!="Rk"),]
## Convert to lower case character data (otherwise will be treated as factors)
for(i in 1:ncol(ds.skaters)) {
ds.skaters[,i] <- as.character(ds.skaters[,i])
names(ds.skaters) <- tolower(colnames(ds.skaters))
}
## finally fix the columns - NAs forced by coercion warnings
for(i in c(1, 3, 6:19)) {
ds.skaters[,i] <- as.numeric(ds.skaters[, i])
}
cn <- colnames(ds.skaters)
ds.skaters <- cbind(ds.skaters,ppp=rowSums(ds.skaters[,which(cn=="pp")]))
cn <- colnames(ds.skaters)
## fix a couple of the column names
#colnames(ds.skaters)
names(ds.skaters)[11] <- "pim"
names(ds.skaters)[18] <- "spct"
## remove the header and totals row
ds.skaters <- ds.skaters[!is.na(ds.skaters$rk), ]
## add the year too
ds.skaters$season <- S
## remove any ' from players names (will case parsing issues later otherwise)
ds.skaters$player <- gsub("'","",ds.skaters[,"player"])
## return the dataframe of subset of all categories
return(ds.skaters[,c(2:11,29,15:16,20,24)])
#ds.skaters
}
P <- scrapeSkaters(2018)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
dbWriteTable(mydb, "Players", P, overwrite = TRUE)
dbSendQuery(mydb, "DELETE from Players where Team = 'TOT'")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
dbWriteTable(mydb, "Players", P, overwrite = TRUE)
dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
dbWriteTable(mydb, "Players", P, overwrite = TRUE)
#dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
dbSendQuery(mydb, "select pos, avg(g) from players group by pos")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
dbWriteTable(mydb, "Players", P, overwrite = TRUE)
#dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
dbSendQuery(mydb, "select pos, avg(g) from Players group by pos")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
dbWriteTable(mydb, "Players", P, overwrite = TRUE)
dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
dbSendQuery(mydb, "select pos, avg(g) from Players group by pos")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
#dbWriteTable(mydb, "Players", P, overwrite = TRUE)
#dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
#dbSendQuery(mydb, "SELECT pos, avg(g) from Players group by pos")
dbSendQuery(mydb, "select count(*) from Players where G>=20 and GP>70")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
#dbWriteTable(mydb, "Players", P, overwrite = TRUE)
#dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
#dbSendQuery(mydb, "SELECT pos, avg(g) from Players group by pos")
dbSendQuery(mydb, "select count(*) from Players where g>=20 and gp>70")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
#dbWriteTable(mydb, "Players", P, overwrite = TRUE)
#dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
#dbSendQuery(mydb, "SELECT pos, avg(g) from Players group by pos")
print(dbSendQuery(mydb, "SELECT count(*) from Players where g>=20 and gp>70"))
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
#dbWriteTable(mydb, "Players", P, overwrite = TRUE)
#dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
#dbSendQuery(mydb, "SELECT pos, avg(g) from Players group by pos")
dbSendQuery("SELECT count(*) from Players where g>=20 and gp>70;")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
#dbWriteTable(mydb, "Players", P, overwrite = TRUE)
#dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
#dbSendQuery(mydb, "SELECT pos, avg(g) from Players group by pos")
dbSendQuery(mydb,"SELECT count(*) from Players where g>=20 and gp>70;")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
#dbWriteTable(mydb, "Players", P, overwrite = TRUE)
#dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
#dbSendQuery(mydb, "SELECT pos, avg(g) from Players group by pos")
dbGetQuery(mydb,"SELECT count(*) from Players where g>=20 and gp>70;")
dbDisconnect(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
#dbWriteTable(mydb, "Players", P, overwrite = TRUE)
#dbSendQuery(mydb, "DELETE from Players where tm = 'TOT'")
dbGetQuery(mydb, "SELECT pos, avg(g) from Players group by pos")
#dbGetQuery(mydb,"SELECT count(*) from Players where g>=20 and gp>70;")
dbDisconnect(mydb)
install.packages("rpart")
install.packages("RMySQL")
install.packages("XML")
install.packages("httr")
library(RMySQL)
library(XML)
library(httr)
library(rpart)
#Opening Connections
mydb<- dbConnect(MySQL(), user='g1117494',password='n332!ieRANNJdata',dbname='g1117494', host='mydb.itap.purdue.edu')
#Exiting Connections
on.exit(dbDisconnect(mydb)) #Also Exiting Connections?
all_cons <- dbListConnections(MySQL())
for (con in all_cons)
dbDisconnect(con)
P<-scrapeSkaters("2018")
#Adding scrapeSkaters data (P) to the 'Players' table in database 'mydb'
#dbWriteTable(mydb,"Players",P,overwrite=TRUE)
dbWriteTable(mydb,"test",P,overwrite=TRUE)
#sql<- "select tm, count(player) as sP, avg(G) as sG from Players where tm!= 'TOT' group by tm order by sG, sP"
#data<-fetch(dbSendQuery(mydb,sql),n=-1)
#Exiting Connections
on.exit(dbDisconnect(mydb)) #Also Exiting Connections?
dbDisconnect(mydb)
require("RMySQL")
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "chin47", password = "iE3322021", dbname = "chin47", host = "mydb.itap.purdue.edu")
on.exit(dbDisconnect(mydb))
?pnorm
pnorm(-2)
sqrt(4)
z <- (90-78.4)/sqrt(31.36)
1-pnorm(z)
pnorm(z)
z <- (100-78.4)/sqrt(31.36)
1-pnorm(z)
pnorm(z)
df <- read.csv('Titanic_updated.csv', stringsAsFactors = TRUE)
df[ ,c(1,2,7,8)] <- lapply(df[,c(1,2,7,8)], factor)
str(df) #does not count toward line count according to Piazza
setwd("C:/Users/thete/OneDrive/Desktop/IE332 A3")
